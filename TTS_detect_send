from concurrent.futures.process import _get_chunks
import threading
import requests
import json
import speech_recognition as sr
from collections import OrderedDict

room_id = 12345
server_url = "http://localhost:8888/api"
server_header = {
    "Content-Type": "application/json"
}
qid_list = []
next_question_num=0

def get_list():
    
    questionNum = 0
    

    body = OrderedDict()

    body['cmd'] = "list"
    body['payload'] = {"roomid":room_id}

    res = requests.post(server_url, headers=server_header, json=body)
    if res.status_code == 200:
        print('connection succese')
        # print(res.json())
        jsonRes = json.loads(res.text)
        questionNum = len(jsonRes['payload']["questions"])
        if len(qid_list) < questionNum :
            for i in range(questionNum - len(qid_list)) :
                qid_list.append(jsonRes['payload']["questions"][len(qid_list)]['qid'])
    
            print(qid_list)
    else :
        print('connection fail')
        # jsonRes = json.loads(res.json())
        # print(jsonRes['payload'])
        
def send_play():

    print(res.status_code)

    body = OrderedDict()

    body['cmd'] = "play"

    body['payload'] = {"roomid":room_id,"pid":qid_list[next_question_num]}

    res = requests.post(server_url, headers=server_header, json=body)
    print(res.status_code)
    if res.status_code == 200 :
        next_question_num = next_question_num+1
        

kakao_url = "https://kakaoi-newtone-openapi.kakao.com/v1/recognize"
kakao_header = {
        #"Transfer-Encoding": "chunked",
        "Content-Type": "application/octet-stream",
        "Authorization" : "KakaoAK " + "5bdcd793f13bebf5e4e874d636b694c0"
         }
canRecording = True
device_index = 0
for device_index, name in enumerate(sr.Microphone.list_microphone_names()):
    #print(f'{device_index}, {name}')
    if name == '스테레오 믹스(Realtek(R) Audio)':
        break

def record():
    global canRecording
    print("recording start")
    r = sr.Recognizer()
    #마이크 말고 스테레오 믹스
    with sr.Microphone(device_index=device_index,sample_rate=16000,chunk_size=1024) as source:
        audio = r.listen(source)
    canRecording = True
    res = requests.post(kakao_url, headers=kakao_header, data=audio.get_raw_data())
    #res = requests.post(url, headers=header, data=get_chunks(audio))
    #print(res.text)
    line = res.text.splitlines()
    strRes = line[-2]
    jsonRes = json.loads(strRes)
    print('결과 : ' + jsonRes["value"])

while True:
    if canRecording == True:
        t = threading.Thread(target=record)
        t.start()
        canRecording = False

